utiliser calculateAllScores.js pour calculer les scores de tous les fournisseurs
cd backend/scripts && node calculateAllScores.js





cacher dans la page "Level 1 Assesment" et dans les regroupements et les exports Excel les colonnes suivantes :

HUYI MODIFICATION
PARTNERS TRADUCTION
Activity Area
Notation ESG
Santé financière
Risques compliance
Calcul méthode ADEME
Scope 1
Scope 2
Scope 3
Vision gloable
ORGANIZATION 3
ORGANIZATION ZONE
Comments
Adresse fournisseur
Analyse des risques Loi Sapin II
details
Note Risque Financier
Note de Conformité
risque_detaille


- Scores mis à jour : 4500
- Scores inchangés : 2188
- Erreurs : 0
- Total traité : 6688


ajouter une page d'authentification permettant d'accéder a l'application avec le nom d'utilistateur "AppFournisseurs@clarins.com" et le mot de passe "App2025Clarins". Il ne sera pas possible d'accéder a l'application sans passer l'authentification
Email : AppFournisseurs@clarins.com
Mot de passe : App2025Clarins


docker-compose logs -f
docker-compose up -d --build frontend

docker exec gestion_fournisseurs_backend ls /app

./deploy-ubuntu.sh
chmod +x deploy-ubuntu-15.188.198.103.sh
sudo ./deploy-ubuntu-15.188.198.103.sh

git checkout -- backend/calculate_scores_2023_v1_fixed.js deploy-ubuntu-15.188.198.103-fixed.sh

# Vérifier les logs du backend
ssh ubuntu@15.188.198.103 "sudo pm2 logs fournisseurs-backend"

# Vérifier les logs de Nginx
ssh ubuntu@15.188.198.103 "sudo tail -f /var/log/nginx/error.log"

calculer les scores calculate_scores_2023_v1_fixed.js
node backend/calculate_scores.js fournisseurs_2023_v1

git add backend/calculate_scores.js
git commit -m "nouvelle config Nginx"
git push

git checkout
git pull

Mettre a jour la prod :
git checkout
sudo bash scripts/update-prod.sh

Installer sur traceability-ec2-dev-01 :
nvm :
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

nvm install 18

sudo apt install apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt install docker-ce
sudo usermod -aG docker ${USER}

deployer app
sudo ./deploy-ubuntu-13.36.205.246.sh

deployer le docker :
scripts/deploy-postgres-docker.sh


install supplier prd 35.181.84.154 (supplier-prd.communify.solutions) :
mkdir AppGetionFournisseurs_3.9_EN
cd AppGetionFournisseurs_3.9_EN
git clone https://github.com/fregou3/AppFournisseurs.git
cd AppFournisseurs
git clone
chmod +x deploy-ubuntu-35.181.84.154.sh
sudo ./deploy-ubuntu-35.181.84.154.sh

sudo apt install apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt install docker-ce
sudo usermod -aG docker ${USER}

chmod +x scripts/deploy-postgres-docker.sh
sudo scripts/deploy-postgres-docker.sh

****************************************

# Commandes pour push Git
# 1. Ajouter les fichiers modifiés
git add .

# 2. Ajouter un fichier spécifique
git add chemin/vers/fichier

# 3. Créer un commit avec un message
git commit -m "Description des modifications"

# 4. Pousser les modifications vers le dépôt distant
git push

# 5. En cas de problème d'authentification
# Configurer les identifiants Git
git config --global user.name "Votre Nom"
git config --global user.email "votre.email@exemple.com"

# 6. Si vous avez des problèmes de merge
# Récupérer les dernières modifications sans fusionner
git fetch
# Voir les différences
git diff origin/master
# Fusionner les modifications
git merge origin/master

# 7. En cas de conflit, après résolution
git add .
git commit -m "Résolution des conflits"
git push

****************************************

echo "# Commandes pour démarrer l'application en développement

## Démarrer le backend
# Se positionner dans le répertoire backend
cd backend

# Installer les dépendances (si ce n'est pas déjà fait)
npm install

# Démarrer le serveur backend en mode développement
npm run dev
# ou
node server.js

## Démarrer le frontend
# Dans un nouveau terminal, se positionner dans le répertoire frontend
cd frontend

# Installer les dépendances (si ce n'est pas déjà fait)
npm install

# Démarrer le serveur de développement frontend
npm start

## Accéder à l'application
# Frontend: http://localhost:3000
# Backend API: http://localhost:5005

# Commandes pour démarrer l'application en production

## Vérifier l'état des services
sudo systemctl status nginx
pm2 list

## Redémarrer le backend si nécessaire
pm2 restart fournisseurs-backend

## Redémarrer Nginx si nécessaire
sudo systemctl restart nginx

## Consulter les logs
# Logs du backend
pm2 logs fournisseurs-backend

# Logs de Nginx
sudo tail -f /var/log/nginx/error.log
sudo tail -f /var/log/nginx/access.log

