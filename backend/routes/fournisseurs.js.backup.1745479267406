const express = require('express');
const router = express.Router();
const XLSX = require('xlsx');
const path = require('path');
const pool = require('../db');
const moment = require('moment');
const multer = require('multer');
const fs = require('fs');

// Configuration de multer pour l'upload de fichiers
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadDir = path.join(__dirname, '../../Reports_Moodies');
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: function (req, file, cb) {
    // Utiliser l'id comme nom de fichier
    const fileName = `${req.params.id}_${Date.now()}${path.extname(file.originalname)}`;
    cb(null, fileName);
  }
});

const upload = multer({
  storage: storage,
  fileFilter: (req, file, cb) => {
    if (file.mimetype === 'application/pdf') {
      cb(null, true);
    } else {
      cb(new Error('Seuls les fichiers PDF sont acceptés'));
    }
  },
  limits: {
    fileSize: 10 * 1024 * 1024 // Limite à 10MB
  }
});

// Fonction pour normaliser les noms de colonnes PostgreSQL tout en préservant les accents
function normalizeColumnName(name) {
  // Remplacer les caractères non alphanumériques (sauf les accents) par des underscores
  return name.replace(/[^a-zA-Z0-9àáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆŠŽ]+/g, '_')
    .replace(/^_|_$/g, '')        // Supprimer les underscores au début et à la fin
    .replace(/__+/g, '_');        // Remplacer les underscores multiples par un seul
}

// Route racine pour récupérer les données de la table fournisseurs standard
router.get('/', async (req, res) => {
  try {
    console.log('Route racine /fournisseurs appelée');
    const { page = 1, pageSize = 50 } = req.query;
    const offset = (parseInt(page) - 1) * parseInt(pageSize);
    const limit = parseInt(pageSize);
    
    console.log('Paramètres de pagination:', { page, pageSize, offset, limit });
    
    const client = await pool.connect();
    try {
      // Compter le nombre total de lignes
      const countResult = await client.query('SELECT COUNT(*) FROM fournisseurs');
      const totalRows = parseInt(countResult.rows[0].count);
      const totalPages = Math.ceil(totalRows / limit);
      
      console.log('Informations de pagination:', { totalRows, totalPages });
      
      // Récupérer les données avec pagination
      const result = await client.query('SELECT * FROM fournisseurs ORDER BY id LIMIT $1 OFFSET $2', [limit, offset]);
      console.log(`${result.rows.length} lignes récupérées`);
      
      // Ajouter les informations de pagination à la réponse
      const response = {
        data: result.rows,
        pagination: {
          page: parseInt(page),
          pageSize: limit,
          totalRows,
          totalPages
        }
      };
      
      res.json(response);
    } finally {
      client.release();
    }
  } catch (error) {
    console.error('Erreur lors de la récupération des données:', error);
    res.status(500).json({ error: 'Erreur lors de la récupération des données' });
  }
});

// Route pour récupérer la liste des tables fournisseurs
router.get('/tables', async (req, res) => {
  try {
    console.log('Route /fournisseurs/tables appelée');
    
    const client = await pool.connect();
    try {
      // Récupérer toutes les tables commençant par "fournisseurs_"
      const result = await client.query(`
        SELECT table_name
        FROM information_schema.tables
        WHERE table_schema = 'public'
        AND table_name LIKE 'fournisseurs_%'
        ORDER BY table_name
      `);
      
      console.log('Tables récupérées:', {
        count: result.rowCount,
        tables: result.rows.map(row => row.table_name)
      });
      
      // Ajouter la table "fournisseurs" si elle existe
      const fournisseursCheck = await client.query(`
        SELECT EXISTS (
          SELECT FROM information_schema.tables
          WHERE table_schema = 'public'
          AND table_name = 'fournisseurs'
        )
      `);
      
      let tables = result.rows.map(row => row.table_name);
      
      if (fournisseursCheck.rows[0].exists) {
        tables.unshift('fournisseurs');
        console.log('Table fournisseurs ajoutée à la liste');
      }
      
      console.log('Réponse finale:', { tables });
      res.json({ tables });
    } finally {
      client.release();
    }
  } catch (error) {
    console.error('Erreur lors de la récupération des tables:', error);
    // Renvoyer un objet avec un tableau vide en cas d'erreur
    res.json({ tables: [] });
  }
});

// Route pour récupérer les données d'une table spécifique
router.get('/table/:tableName', async (req, res) => {
  try {
    const { tableName } = req.params;
    const { page = 1, pageSize = 50, sortBy, sortOrder, filters } = req.query;
    const offset = (parseInt(page) - 1) * parseInt(pageSize);
    const limit = parseInt(pageSize);
    
    console.log('Route /fournisseurs/table/:tableName appelée avec:', {
      tableName,
      page,
      pageSize,
      offset,
      limit,
      sortBy,
      sortOrder,
      filters
    });
    
    // Vérifier que le nom de la table est valide
    if (!tableName.startsWith('fournisseurs_') && tableName !== 'fournisseurs') {
      console.log('Nom de table invalide:', tableName);
      return res.json({ 
        data: [],
        pagination: {
          page: parseInt(page),
          pageSize: limit,
          totalRows: 0,
          totalPages: 0
        }
      });
    }
    
    const client = await pool.connect();
    try {
      // Vérifier si la table existe
      const tableCheck = await client.query(`
        SELECT EXISTS (
          SELECT FROM information_schema.tables
          WHERE table_schema = 'public'
          AND table_name = $1
        )
      `, [tableName]);
      
      if (!tableCheck.rows[0].exists) {
        console.log('Table non trouvée:', tableName);
        return res.json({ 
          data: [],
          pagination: {
            page: parseInt(page),
            pageSize: limit,
            totalRows: 0,
            totalPages: 0
          }
        });
      }
      
      // Construire la requête de base
      let query = `SELECT * FROM "${tableName}"`;
      let countQuery = `SELECT COUNT(*) FROM "${tableName}"`;
      let queryParams = [];
      let whereClause = '';
      
      // Ajouter les filtres si présents
      if (filters) {
        try {
          const parsedFilters = typeof filters === 'string' ? JSON.parse(filters) : filters;
          const filterConditions = [];
          
          Object.entries(parsedFilters).forEach(([column, values]) => {
            if (Array.isArray(values) && values.length > 0) {
              const placeholders = values.map((_, idx) => `$${queryParams.length + idx + 1}`).join(', ');
              filterConditions.push(`"${column}" IN (${placeholders})`);
              queryParams.push(...values);
            }
          });
          
          if (filterConditions.length > 0) {
            whereClause = ` WHERE ${filterConditions.join(' AND ')}`;
            query += whereClause;
            countQuery += whereClause;
          }
        } catch (error) {
          console.error('Erreur lors du parsing des filtres:', error);
        }
      }
      
      // Ajouter le tri si présent
      if (sortBy && sortOrder) {
        query += ` ORDER BY "${sortBy}" ${sortOrder === 'desc' ? 'DESC' : 'ASC'}`;
      } else {
        // Tri par défaut
        query += ` ORDER BY id`;
      }
      
      // Compter le nombre total de lignes
      const countResult = await client.query(countQuery, queryParams);
      const totalRows = parseInt(countResult.rows[0].count);
      const totalPages = Math.ceil(totalRows / limit);
      
      console.log('Informations de pagination:', { totalRows, totalPages });
      
      // Ajouter la pagination
      query += ` LIMIT $${queryParams.length + 1} OFFSET $${queryParams.length + 2}`;
      queryParams.push(limit, offset);
      
      console.log('Requête SQL:', query);
      console.log('Paramètres:', queryParams);
      
      // Exécuter la requête
      const result = await client.query(query, queryParams);
      console.log(`${result.rows.length} lignes récupérées`);
      
      // Renvoyer les données avec les informations de pagination
      res.json({ 
        data: result.rows,
        pagination: {
          page: parseInt(page),
          pageSize: limit,
          totalRows,
          totalPages
        }
      });
    } finally {
      client.release();
    }
  } catch (error) {
    console.error('Erreur lors de la récupération des données:', error);
    res.status(500).json({ error: 'Erreur lors de la récupération des données' });
  }
}););

// Route pour importer un fichier Excel
router.post('/upload', async (req, res) => {
  try {
    console.log('Upload request received');
    console.log('Request body:', req.body);
    console.log('Request files:', req.files ? Object.keys(req.files) : 'No files');
    
    if (!req.files || !req.files.file) {
      return res.status(400).json({ error: 'Aucun fichier n\'a été uploadé' });
    }
    
    // Vérifier que le fichier est un fichier Excel
    const file = req.files.file;
    if (!file.name.endsWith('.xlsx') && !file.name.endsWith('.xls')) {
      return res.status(400).json({ error: 'Le fichier doit être un fichier Excel (.xlsx ou .xls)' });
    }
    
    // Créer le nom de la table à partir du nom du fichier
    let tableName = 'fournisseurs_' + req.body.tableName;
    tableName = tableName.toLowerCase().replace(/[^a-z0-9_]/g, '_');
    console.log(`Nom de la table: ${tableName}`);
    
    // Lire le fichier Excel
    console.log(`Lecture du fichier Excel: ${file.name}`);
    const workbook = XLSX.read(file.data);
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    
    // Lire toutes les données du fichier Excel
    const data = XLSX.utils.sheet_to_json(worksheet, { 
      raw: true, 
      defval: null,
      blankrows: false
    });
    
    console.log(`Nombre de lignes lues dans le fichier Excel: ${data.length}`);
    
    if (data.length === 0) {
      return res.status(400).json({ error: 'Le fichier Excel est vide' });
    }
    
    // Extraire les noms de colonnes à partir de la première ligne
    const columns = Object.keys(data[0]);
    console.log(`Colonnes trouvées dans le fichier Excel: ${columns.join(', ')}`);
    
    // Connexion à la base de données
    const client = await pool.connect();
    
    try {
      // Supprimer la table si elle existe déjà
      await client.query(`DROP TABLE IF EXISTS "${tableName}" CASCADE`);
      console.log(`Table ${tableName} supprimée si elle existait`);
      
      // Créer la table avec toutes les colonnes du fichier Excel
      let createTableSQL = `CREATE TABLE "${tableName}" (
        id SERIAL PRIMARY KEY,
      `;
      
      // Ajouter chaque colonne avec le type TEXT
      const columnDefinitions = columns.map(col => {
        // Normaliser le nom de la colonne pour PostgreSQL
        const pgCol = normalizeColumnName(col);
        return `"${pgCol}" TEXT`;
      });
      
      createTableSQL += columnDefinitions.join(',\n        ');
      createTableSQL += '\n      )';
      
      await client.query(createTableSQL);
      console.log(`Table ${tableName} créée avec ${columns.length} colonnes`);
      
      // Insérer les données ligne par ligne
      let insertedCount = 0;
      let errorCount = 0;
      
      // Utiliser une transaction pour l'insertion
      await client.query('BEGIN');
      
      for (const [index, row] of data.entries()) {
        try {
          // Préparer les colonnes et les valeurs pour l'insertion
          const insertColumns = [];
          const insertValues = [];
          const placeholders = [];
          
          // Pour chaque colonne dans le fichier Excel
          columns.forEach((col, i) => {
            // Normaliser le nom de la colonne pour PostgreSQL
            const pgCol = normalizeColumnName(col);
            
            // Ajouter la colonne et la valeur
            insertColumns.push(pgCol);
            insertValues.push(row[col]);
            placeholders.push(`$${i + 1}`);
          });
          
          // Construire la requête d'insertion
          const insertQuery = `
            INSERT INTO "${tableName}" (${insertColumns.map(col => `"${col}"`).join(', ')})
            VALUES (${placeholders.join(', ')})
          `;
          
          // Exécuter la requête d'insertion
          await client.query(insertQuery, insertValues);
          insertedCount++;
          
          // Afficher la progression
          if (insertedCount % 100 === 0 || insertedCount === data.length) {
            console.log(`Progression: ${insertedCount}/${data.length} lignes insérées (${Math.round(insertedCount / data.length * 100)}%)`);
          }
        } catch (error) {
          console.error(`Erreur lors de l'insertion de la ligne ${index + 1}:`, error);
          errorCount++;
        }
      }
      
      // Valider la transaction
      await client.query('COMMIT');
      
      // Vérifier le nombre final de lignes
      const countResult = await client.query(`SELECT COUNT(*) FROM "${tableName}"`);
      const finalCount = parseInt(countResult.rows[0].count);
      
      console.log(`Importation terminée:
      - Lignes dans le fichier Excel: ${data.length}
      - Lignes insérées avec succès: ${insertedCount}
      - Lignes avec erreurs: ${errorCount}
      - Nombre final de lignes dans la table: ${finalCount}
      `);
      
      // Retourner une réponse de succès
      return res.status(200).json({
        message: `Importation réussie dans la table ${tableName}`,
        table: tableName,
        stats: {
          totalRows: data.length,
          insertedRows: insertedCount,
          errorCount: errorCount,
          finalTableRows: finalCount,
          matchesExcelRowCount: finalCount === data.length
        }
      });
    } catch (error) {
      // Annuler la transaction en cas d'erreur
      await client.query('ROLLBACK');
      console.error('Erreur lors de l\'importation:', error);
      return res.status(500).json({
        error: 'Une erreur est survenue lors de l\'importation',
        details: error.message
      });
    } finally {
      client.release();
    }
  } catch (error) {
    console.error('Erreur globale lors de l\'upload:', error);
    return res.status(500).json({
      error: 'Une erreur est survenue lors du traitement du fichier',
      details: error.message
    });
  }
});

// Route pour supprimer une table
router.delete('/table/:tableName', async (req, res) => {
  try {
    const { tableName } = req.params;
    
    // Vérifier que le nom de la table est valide (commence par fournisseurs_)
    if (!tableName.startsWith('fournisseurs_')) {
      return res.status(400).json({ error: 'Nom de table invalide' });
    }
    
    const client = await pool.connect();
    try {
      // Vérifier si la table existe
      const tableCheck = await client.query(`
        SELECT EXISTS (
          SELECT FROM information_schema.tables
          WHERE table_schema = 'public'
          AND table_name = $1
        )
      `, [tableName]);
      
      if (!tableCheck.rows[0].exists) {
        return res.status(404).json({ error: 'Table non trouvée' });
      }
      
      // Supprimer la table
      await client.query(`DROP TABLE IF EXISTS "${tableName}" CASCADE`);
      
      res.json({ message: `Table ${tableName} supprimée avec succès` });
    } finally {
      client.release();
    }
  } catch (error) {
    console.error('Erreur lors de la suppression de la table:', error);
    res.status(500).json({ error: 'Erreur lors de la suppression de la table' });
  }
});

// Route pour exporter une table en Excel
router.get('/export/:tableName', async (req, res) => {
  try {
    const { tableName } = req.params;
    
    // Vérifier que le nom de la table est valide
    if (!tableName.startsWith('fournisseurs_') && tableName !== 'fournisseurs') {
      return res.status(400).json({ error: 'Nom de table invalide' });
    }
    
    const client = await pool.connect();
    try {
      // Vérifier si la table existe
      const tableCheck = await client.query(`
        SELECT EXISTS (
          SELECT FROM information_schema.tables
          WHERE table_schema = 'public'
          AND table_name = $1
        )
      `, [tableName]);
      
      if (!tableCheck.rows[0].exists) {
        return res.status(404).json({ error: 'Table non trouvée' });
      }
      
      // Récupérer toutes les données de la table
      const result = await client.query(`SELECT * FROM "${tableName}"`);
      
      // Créer un workbook Excel
      const workbook = XLSX.utils.book_new();
      const worksheet = XLSX.utils.json_to_sheet(result.rows);
      
      // Ajouter la feuille au workbook
      XLSX.utils.book_append_sheet(workbook, worksheet, tableName);
      
      // Convertir le workbook en buffer
      const excelBuffer = XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });
      
      // Définir les headers pour le téléchargement
      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
      res.setHeader('Content-Disposition', `attachment; filename=${tableName}.xlsx`);
      
      // Envoyer le fichier
      res.send(excelBuffer);
    } finally {
      client.release();
    }
  } catch (error) {
    console.error('Erreur lors de l\'exportation de la table:', error);
    res.status(500).json({ error: 'Erreur lors de l\'exportation de la table' });
  }
});

module.exports = router;